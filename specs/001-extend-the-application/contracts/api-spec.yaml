openapi: 3.0.3
info:
  title: My Books API
  version: 1.0.0
  description: Personal book collection management API
servers:
  - url: http://localhost:8000/api
    description: Local development server
security:
  - OAuth2: []
paths:
  /books/:
    get:
      operationId: listBooks
      summary: List user's books
      description: Retrieve paginated list of books in user's collection with optional filtering
      tags:
        - Books
      parameters:
        - name: reading_status
          in: query
          description: Filter by reading status
          required: false
          schema:
            type: string
            enum: [want_to_read, reading, finished, dropped]
        - name: genre
          in: query
          description: Filter by book genre
          required: false
          schema:
            type: string
            enum: [art, biography, business, chick_lit, childrens, christian, classics, comics, contemporary, cookbooks, crime, ebooks, fantasy, fiction, gay_and_lesbian, graphic_novels, historical_fiction, history, horror, humor_and_comedy, manga, memoir, music, mystery, nonfiction, paranormal, philosophy, poetry, psychology, religion, romance, science, science_fiction, self_help, suspense, spirituality, sports, thriller, travel, young_adult]
        - name: author
          in: query
          description: Filter by author name (case-insensitive partial match)
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Search books by title, author name, or description
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
        - name: page_size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of books retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of books
                  next:
                    type: string
                    nullable: true
                    description: URL for next page
                  previous:
                    type: string
                    nullable: true
                    description: URL for previous page
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserBookDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      operationId: addBookToCollection
      summary: Add book to collection
      description: Add a new book to user's collection, creating author if needed
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBookRequest'
      responses:
        '201':
          description: Book added to collection successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBookDetail'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Book already exists in user's collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{id}/:
    get:
      operationId: getBook
      summary: Get book details
      description: Retrieve detailed information about a specific book in user's collection
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: UserBook ID
          schema:
            type: integer
      responses:
        '200':
          description: Book details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBookDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateBookInCollection
      summary: Update book in collection
      description: Update reading status or other book information in user's collection
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: UserBook ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequest'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBookDetail'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      operationId: removeBookFromCollection
      summary: Remove book from collection
      description: Remove a book from user's collection (preserves book and reviews)
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: UserBook ID
          schema:
            type: integer
      responses:
        '204':
          description: Book removed from collection successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /authors/:
    get:
      operationId: listAuthors
      summary: List authors
      description: Retrieve paginated list of all authors
      tags:
        - Authors
      parameters:
        - name: search
          in: query
          description: Search authors by name
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: List of authors retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /authors/{id}/:
    get:
      operationId: getAuthor
      summary: Get author details
      description: Retrieve detailed information about a specific author
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          required: true
          description: Author ID
          schema:
            type: integer
      responses:
        '200':
          description: Author details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /reviews/:
    get:
      operationId: listReviews
      summary: List user's reviews
      description: Retrieve paginated list of user's book reviews
      tags:
        - Reviews
      parameters:
        - name: book
          in: query
          description: Filter by book ID
          required: false
          schema:
            type: integer
        - name: rating
          in: query
          description: Filter by rating
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: List of reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      operationId: createReview
      summary: Create book review
      description: Create a new review for a book
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewRequest'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: User already has a review for this book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reviews/{id}/:
    get:
      operationId: getReview
      summary: Get review details
      description: Retrieve detailed information about a specific review
      tags:
        - Reviews
      parameters:
        - name: id
          in: path
          required: true
          description: Review ID
          schema:
            type: integer
      responses:
        '200':
          description: Review details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateReview
      summary: Update review
      description: Update an existing book review
      tags:
        - Reviews
      parameters:
        - name: id
          in: path
          required: true
          description: Review ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReviewRequest'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      operationId: deleteReview
      summary: Delete review
      description: Delete a book review
      tags:
        - Reviews
      parameters:
        - name: id
          in: path
          required: true
          description: Review ID
          schema:
            type: integer
      responses:
        '204':
          description: Review deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize/
          tokenUrl: /oauth/token/
          scopes:
            read: Read access to user's data 
            write: Write access to user's data

  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        tagline:
          type: string
          maxLength: 500
          nullable: true
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        genre:
          type: string
          enum: [art, biography, business, chick_lit, childrens, christian, classics, comics, contemporary, cookbooks, crime, ebooks, fantasy, fiction, gay_and_lesbian, graphic_novels, historical_fiction, history, horror, humor_and_comedy, manga, memoir, music, mystery, nonfiction, paranormal, philosophy, poetry, psychology, religion, romance, science, science_fiction, self_help, suspense, spirituality, sports, thriller, travel, young_adult]
        author:
          $ref: '#/components/schemas/Author'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    Author:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
          nullable: true
        biography:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    AuthorDetail:
      allOf:
        - $ref: '#/components/schemas/Author'
        - type: object
          properties:
            books:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  genre:
                    type: string
              readOnly: true

    UserBook:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        reading_status:
          type: string
          enum: [want_to_read, reading, finished, dropped]
        date_added:
          type: string
          format: date-time
          readOnly: true
        date_started:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        date_finished:
          type: string
          format: date-time
          nullable: true
          readOnly: true

    UserBookDetail:
      allOf:
        - $ref: '#/components/schemas/UserBook'
        - type: object
          properties:
            book:
              $ref: '#/components/schemas/Book'

    Review:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        book:
          type: object
          properties:
            id:
              type: integer
            title:
              type: string
            author:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
          readOnly: true
        rating:
          type: integer
          minimum: 1
          maximum: 5
        text:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    AddBookRequest:
      type: object
      required:
        - title
        - author_name
        - genre
      properties:
        title:
          type: string
          maxLength: 255
        tagline:
          type: string
          maxLength: 500
        description:
          type: string
        image:
          type: string
          format: uri
        author_name:
          type: string
          maxLength: 255
          description: Author name - will auto-create if doesn't exist
        genre:
          type: string
          enum: [art, biography, business, chick_lit, childrens, christian, classics, comics, contemporary, cookbooks, crime, ebooks, fantasy, fiction, gay_and_lesbian, graphic_novels, historical_fiction, history, horror, humor_and_comedy, manga, memoir, music, mystery, nonfiction, paranormal, philosophy, poetry, psychology, religion, romance, science, science_fiction, self_help, suspense, spirituality, sports, thriller, travel, young_adult]
        reading_status:
          type: string
          enum: [want_to_read, reading, finished, dropped]
          default: want_to_read

    UpdateBookRequest:
      type: object
      properties:
        reading_status:
          type: string
          enum: [want_to_read, reading, finished, dropped]

    CreateReviewRequest:
      type: object
      required:
        - book_id
        - rating
      properties:
        book_id:
          type: integer
          description: ID of the book being reviewed
        rating:
          type: integer
          minimum: 1
          maximum: 5
        text:
          type: string

    UpdateReviewRequest:
      type: object
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        text:
          type: string

    Error:
      type: object
      properties:
        detail:
          type: string
        code:
          type: string

    ValidationError:
      type: object
      properties:
        field_name:
          type: array
          items:
            type: string

  responses:
    Unauthorized:
      description: Authentication credentials were not provided
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'