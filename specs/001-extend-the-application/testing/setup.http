# Book Collection API - Setup and Authentication
# This file creates test users and authentication tokens for API testing

### 1. Create Test User (Django Shell Command)
# Run this command first:
# echo "from django.contrib.auth.models import User; from rest_framework.authtoken.models import Token; user, created = User.objects.get_or_create(username='testuser', defaults={'email': 'test@example.com'}); user.set_password('testpass123') if created else None; user.save() if created else None; token, created = Token.objects.get_or_create(user=user); print(f'Token: {token.key}')" | uv run manage.py shell

### 2. Verify API Root (Should return 401 - authentication required)
GET http://localhost:8080/api/
Content-Type: application/json

### Expected Response: 401 Unauthorized
# {
#     "detail": "Authentication credentials were not provided."
# }

### 3. Test Invalid Token (Should return 401)
GET http://localhost:8080/api/books/
Authorization: Token invalid_token_123
Content-Type: application/json

### Expected Response: 401 Unauthorized  
# {
#     "detail": "Invalid token."
# }

### 4. Test Valid Authentication (Replace YOUR_TOKEN with actual token from step 1)
GET http://localhost:8080/api/books/
Authorization: Token YOUR_TOKEN
Content-Type: application/json

### Expected Response: 200 OK with user's book collection

### 5. Test All Main Endpoints with Valid Token
GET http://localhost:8080/api/authors/
Authorization: Token YOUR_TOKEN
Content-Type: application/json

###
GET http://localhost:8080/api/browse/
Authorization: Token YOUR_TOKEN
Content-Type: application/json

###
GET http://localhost:8080/api/reviews/
Authorization: Token YOUR_TOKEN
Content-Type: application/json

### 6. Check API Documentation Endpoints
GET http://localhost:8080/api/schema/

###
GET http://localhost:8080/api/docs/

###
GET http://localhost:8080/api/redoc/

### Variables for Testing
# @baseUrl = http://localhost:8080/api
# @token = YOUR_TOKEN_HERE