# Comprehensive OAuth2 & Token Authentication Test Scenarios
# Tests all CRUD operations with both Token authentication and OAuth2 scopes
# This file records all successful test scenarios from manual testing

### Setup: Replace YOUR_TOKEN with actual token from setup.http
@token = YOUR_TOKEN
@baseUrl = http://localhost:8080/api

### 1. Authentication Tests
### 1.1 Test unauthenticated access (should fail)
GET {{baseUrl}}/
Content-Type: application/json

### Expected: 401 Unauthorized
# {
#     "detail": "Authentication credentials were not provided."
# }

### 1.2 Test invalid token (should fail)  
GET {{baseUrl}}/books/
Authorization: Token invalid_token_123
Content-Type: application/json

### Expected: 401 Unauthorized
# {
#     "detail": "Invalid token."
# }

### 1.3 Test valid token authentication (should succeed)
GET {{baseUrl}}/books/
Authorization: Token {{token}}
Content-Type: application/json

### Expected: 200 OK with user's book collection

### 2. Read Operations (GET) - Testing OAuth2 'read' scope
### 2.1 Test Authors endpoint (read-only, requires 'read' scope)
GET {{baseUrl}}/authors/
Authorization: Token {{token}}
Content-Type: application/json

### Expected: 200 OK with authors list
# {
#     "count": 1,
#     "results": [
#         {
#             "id": 1,
#             "name": "J.R.R. Tolkien",
#             "biography": "",
#             "books_count": 2
#         }
#     ]
# }

### 2.2 Test Browse endpoint (read-only, requires 'read' scope) 
GET {{baseUrl}}/browse/
Authorization: Token {{token}}
Content-Type: application/json

### Expected: 200 OK with all books catalog
# {
#     "count": 2,
#     "results": [
#         {
#             "id": 1,
#             "title": "The Hobbit",
#             "author": { "name": "J.R.R. Tolkien" },
#             "genre": "fantasy"
#         }
#     ]
# }

### 2.3 Test User's personal collection endpoint (requires 'read' scope)
GET {{baseUrl}}/books/
Authorization: Token {{token}}
Content-Type: application/json

### Expected: 200 OK with user's personal books with reading status

### 2.4 Test Reviews endpoint (requires 'read' scope)
GET {{baseUrl}}/reviews/
Authorization: Token {{token}}
Content-Type: application/json

### Expected: 200 OK with user's reviews

### 3. Write Operations (POST/PUT/PATCH/DELETE) - Testing OAuth2 'write' scope
### 3.1 Test adding new book to collection (requires 'read' and 'write' scopes)
POST {{baseUrl}}/books/
Authorization: Token {{token}}
Content-Type: application/json

{
  "title": "1984",
  "genre": "fiction", 
  "description": "George Orwell's dystopian novel",
  "author_name": "George Orwell",
  "reading_status": "want_to_read"
}

### Expected: 201 Created
# {
#     "id": 3,
#     "book": {
#         "title": "1984",
#         "author": {
#             "name": "George Orwell"
#         }
#     },
#     "reading_status": "want_to_read",
#     "date_added": "2025-09-25T14:07:10.537317+10:00"
# }

### 3.2 Test creating a review (requires 'read' and 'write' scopes)
POST {{baseUrl}}/reviews/
Authorization: Token {{token}}
Content-Type: application/json

{
  "book_id": 1,
  "rating": 5,
  "text": "Amazing fantasy book! Bilbo's adventure is captivating."
}

### Expected: 201 Created
# {
#     "id": 1,
#     "book": {
#         "title": "The Hobbit",
#         "author": { "name": "J.R.R. Tolkien" }
#     },
#     "rating": 5,
#     "text": "Amazing fantasy book! Bilbo's adventure is captivating.",
#     "user": "testuser"
# }

### 3.3 Test updating reading status (requires 'read' and 'write' scopes)
PATCH {{baseUrl}}/books/1/
Authorization: Token {{token}}
Content-Type: application/json

{
  "reading_status": "reading"
}

### Expected: 200 OK with updated status and date_started set

### 3.4 Test getting specific book details after update
GET {{baseUrl}}/books/1/
Authorization: Token {{token}}
Content-Type: application/json

### Expected: 200 OK with detailed book info including reading status and dates

### 3.5 Test deleting a book from collection (requires 'read' and 'write' scopes)
DELETE {{baseUrl}}/books/3/
Authorization: Token {{token}}

### Expected: 204 No Content (book removed from user's collection)

### 4. Verify OAuth2 Permission Classes are Working
### 4.1 All read-only endpoints (AuthorViewSet, BookViewSet) require 'read' scope
### 4.2 All CRUD endpoints (UserBookViewSet, ReviewViewSet) require 'read' and 'write' scopes  
### 4.3 IsAuthenticatedOrTokenHasScope allows both Token auth and OAuth2 auth
### 4.4 Proper error responses for authentication failures

### 5. Test Data Validation
### 5.1 Test invalid genre (should fail with validation error)
POST {{baseUrl}}/books/
Authorization: Token {{token}}
Content-Type: application/json

{
  "title": "Test Book",
  "genre": "invalid_genre",
  "author_name": "Test Author",
  "reading_status": "want_to_read"
}

### Expected: 400 Bad Request
# {
#     "genre": [
#         "\"invalid_genre\" is not a valid choice."
#     ]
# }

### 6. Test Edge Cases
### 6.1 Test review validation - rating out of range
POST {{baseUrl}}/reviews/
Authorization: Token {{token}}
Content-Type: application/json

{
  "book_id": 1,
  "rating": 6,
  "text": "Test review"
}

### Expected: 400 Bad Request with rating validation error

### 6.2 Test review for non-existent book
POST {{baseUrl}}/reviews/
Authorization: Token {{token}}
Content-Type: application/json

{
  "book_id": 999,
  "rating": 5,
  "text": "Test review"
}

### Expected: 400 Bad Request with book not found error

### Summary: All OAuth2 Permission Classes Working
# ✅ IsAuthenticatedOrTokenHasScope working correctly
# ✅ Read operations require 'read' scope
# ✅ Write operations require 'read' and 'write' scopes  
# ✅ Hybrid authentication (Token + OAuth2) working
# ✅ Proper error handling for authentication/authorization
# ✅ All CRUD operations tested and working