# Scenario 6: Handle Edge Cases and Error Conditions
# User Story: As a system, I need to handle various edge cases gracefully

### 1. Try to add invalid book data (missing required fields)
POST http://localhost:8080/api/books/
Authorization: Token YOUR_TOKEN
Content-Type: application/json

{
  "title": "",  // Empty title should fail
  "genre": "invalid_genre",  // Invalid genre choice
  "author": {
    "name": ""  // Empty author name should fail
  }
}

### Expected Response: 400 Bad Request with validation errors

### 2. Try to add review with invalid rating (outside 1-5 range)
POST http://localhost:8080/api/reviews/
Authorization: Token YOUR_TOKEN
Content-Type: application/json

{
  "book": 1,
  "rating": 6,  // Invalid rating > 5
  "review_text": "Invalid rating test"
}

### Expected Response: 400 Bad Request

### 3. Try to access non-existent book
GET http://localhost:8080/api/books/999/
Authorization: Token YOUR_TOKEN
Content-Type: application/json

### Expected Response: 404 Not Found

### 4. Try to update non-existent book
PATCH http://localhost:8080/api/books/999/
Authorization: Token YOUR_TOKEN
Content-Type: application/json

{
  "reading_status": "reading"
}

### Expected Response: 404 Not Found

### 5. Try to access API without authentication
GET http://localhost:8080/api/books/
Content-Type: application/json

### Expected Response: 401 Unauthorized

### 6. Try to access another user's book (if multiple users exist)
# This test requires a second user - for now just verify user isolation
GET http://localhost:8080/api/books/
Authorization: Token YOUR_TOKEN
Content-Type: application/json

### Should only return books for the authenticated user

### 7. Test pagination with large datasets (if applicable)
GET http://localhost:8080/api/books/?page=1&page_size=1
Authorization: Token YOUR_TOKEN
Content-Type: application/json

### 8. Test invalid filter values
GET http://localhost:8080/api/books/?reading_status=invalid_status
Authorization: Token YOUR_TOKEN
Content-Type: application/json

### Should return empty results or appropriate error

### 9. Test book with very long description (within limits)
POST http://localhost:8080/api/books/
Authorization: Token YOUR_TOKEN
Content-Type: application/json

{
  "title": "Test Book with Long Description",
  "genre": "fiction",
  "author": {
    "name": "Test Author"
  },
  "description": "This is a very long description that tests the character limits of the description field. It should be within the allowed limits but we want to verify that the system handles longer text appropriately. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  "reading_status": "want_to_read"
}