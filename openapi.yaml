openapi: 3.1.0
info:
  title: Book Collection Management API
  version: 1.0.0
  description: A comprehensive API for managing personal book collections with reading
    status tracking, reviews, and recommendations.
paths:
  /api/users/:
    post:
      operationId: users_create
      description: Create a new user account
      summary: Create user
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - oauth2:
        - read
        - write
      - tokenAuth: []
      responses:
        '201':
          description: User successfully created
        '400':
          description: Validation error
    get:
      operationId: users_list
      description: List all users with filtering and search capabilities
      summary: List all users
      parameters:
      - in: query
        name: date_joined__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: date_joined__lte
        schema:
          type: string
          format: date-time
      - in: query
        name: groups__name__icontains
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_superuser
        schema:
          type: boolean
      - in: query
        name: last_login__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: last_login__lte
        schema:
          type: string
          format: date-time
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - users
      security:
      - oauth2:
        - read
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Paginated list of system users
  /api/users/{id}/:
    patch:
      operationId: users_partial_update
      description: Partially update user information
      summary: Partially update user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - oauth2:
        - read
        - write
      - tokenAuth: []
      responses:
        '200':
          description: User successfully updated
        '400':
          description: Validation error
        '404':
          description: User not found
    put:
      operationId: users_update
      description: Update user information
      summary: Update user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - oauth2:
        - read
        - write
      - tokenAuth: []
      responses:
        '200':
          description: User successfully updated
        '400':
          description: Validation error
        '404':
          description: User not found
    get:
      operationId: users_retrieve
      description: Get detailed information about a specific user
      summary: Get user details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - oauth2:
        - read
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Detailed user information
        '404':
          description: User not found
    delete:
      operationId: users_destroy
      description: Delete a user account
      summary: Delete user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - oauth2:
        - read
        - write
      - tokenAuth: []
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
  /api/groups/:
    get:
      operationId: groups_list
      description: List all groups with filtering and search capabilities
      summary: List all groups
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - groups
      security:
      - oauth2:
        - read
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Paginated list of user groups
  /api/groups/{id}/:
    get:
      operationId: groups_retrieve
      description: Get detailed information about a specific group
      summary: Get group details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group.
        required: true
      tags:
      - groups
      security:
      - oauth2:
        - read
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Detailed group information with user count
        '404':
          description: Group not found
  /api/groups/{id}/users/:
    get:
      operationId: groups_users_retrieve
      description: Get all users that belong to this group
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this group.
        required: true
      tags:
      - groups
      security:
      - oauth2:
        - read
        - write
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    type: string
                    description: Group name
                  user_count:
                    type: integer
                    description: Number of users in group
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                    description: List of users in this group
          description: Users in the specified group
  /api/books/:
    post:
      operationId: create_book
      description: Create a new catalog book. Provide core metadata and author name
        (created on demand).
      summary: Create book
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookRequest'
        required: true
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '201':
          description: Book created
        '400':
          description: Validation error
    get:
      operationId: search_available_books
      description: Browse the full catalog of books with search, filtering, and ordering
        support.
      summary: List books
      parameters:
      - in: query
        name: author__name
        schema:
          type: string
      - in: query
        name: genre
        schema:
          type: string
          enum:
          - art
          - biography
          - business
          - chick_lit
          - childrens
          - christian
          - classics
          - comics
          - contemporary
          - cookbooks
          - crime
          - ebooks
          - fantasy
          - fiction
          - gay_and_lesbian
          - graphic_novels
          - historical_fiction
          - history
          - horror
          - humor_and_comedy
          - manga
          - memoir
          - music
          - mystery
          - nonfiction
          - paranormal
          - philosophy
          - poetry
          - psychology
          - religion
          - romance
          - science
          - science_fiction
          - self_help
          - spirituality
          - sports
          - suspense
          - thriller
          - travel
          - young_adult
        description: |-
          * `art` - Art
          * `biography` - Biography
          * `business` - Business
          * `chick_lit` - Chick Lit
          * `childrens` - Children's
          * `christian` - Christian
          * `classics` - Classics
          * `comics` - Comics
          * `contemporary` - Contemporary
          * `cookbooks` - Cookbooks
          * `crime` - Crime
          * `ebooks` - Ebooks
          * `fantasy` - Fantasy
          * `fiction` - Fiction
          * `gay_and_lesbian` - Gay and Lesbian
          * `graphic_novels` - Graphic Novels
          * `historical_fiction` - Historical Fiction
          * `history` - History
          * `horror` - Horror
          * `humor_and_comedy` - Humor and Comedy
          * `manga` - Manga
          * `memoir` - Memoir
          * `music` - Music
          * `mystery` - Mystery
          * `nonfiction` - Nonfiction
          * `paranormal` - Paranormal
          * `philosophy` - Philosophy
          * `poetry` - Poetry
          * `psychology` - Psychology
          * `religion` - Religion
          * `romance` - Romance
          * `science` - Science
          * `science_fiction` - Science Fiction
          * `self_help` - Self Help
          * `suspense` - Suspense
          * `spirituality` - Spirituality
          * `sports` - Sports
          * `thriller` - Thriller
          * `travel` - Travel
          * `young_adult` - Young Adult
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -author__name
          - -created_at
          - -title
          - author__name
          - created_at
          - title
        description: Sort results by 'title', 'created_at', or 'author__name' (prefix
          with '-' to reverse).
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search by title, description, tagline, or author name.
      tags:
      - books
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '200':
          description: Paginated list of catalog books
  /api/books/{id}/:
    patch:
      operationId: partial_update_book
      description: Update selected book fields without replacing the entire record.
      summary: Partially update book
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this book.
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBookRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBookRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBookRequest'
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '200':
          description: Book partially updated
        '400':
          description: Validation error
        '404':
          description: Book not found
    put:
      operationId: update_book
      description: Replace a book's metadata, including author reassignment if desired.
      summary: Update book
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this book.
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookRequest'
        required: true
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '200':
          description: Book updated
        '400':
          description: Validation error
        '404':
          description: Book not found
    get:
      operationId: get_book_catalog_details
      description: Get full catalog details for a specific book.
      summary: Retrieve book
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this book.
        required: true
      tags:
      - books
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '200':
          description: Book details returned
        '404':
          description: Book not found
    delete:
      operationId: delete_book
      description: Delete a catalog book. Cascades to user collections and reviews
        tied to the book.
      summary: Delete book
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this book.
        required: true
      tags:
      - books
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '204':
          description: Book deleted
        '404':
          description: Book not found
  /api/user-books/:
    post:
      operationId: add_book_to_user_collection
      description: Add a book to the authenticated user's personal collection with
        initial reading status. You can either reference an existing book by its book_id
        or create a completely new book entry if it doesn't exist in the system yet.
        When adding an existing book, provide the book_id and desired reading_status
        (defaults to 'want_to_read'). When creating a new book, provide complete book
        details including title, author information, and genre. Use this tool when
        a user wants to add a book to their personal library for tracking. The system
        prevents duplicate entries - each user can only have one instance of each
        book in their collection. The response includes the created UserBook relationship
        with book details and initial status. This creates a tracking relationship
        but doesn't modify the original book record if using an existing book. Requires
        user authentication.
      summary: Add a book to user's personal collection
      tags:
      - user-books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBookRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserBookRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserBookRequest'
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '201':
          description: Book successfully added to user's collection with initial reading
            status
        '400':
          description: Validation error, missing required fields, or book already
            exists in user's collection
    get:
      operationId: list_user_personal_book_collection
      description: Retrieve all books in the authenticated user's personal collection
        with reading status tracking and date information. This endpoint returns only
        books that the authenticated user has explicitly added to their personal library,
        along with their reading status (want_to_read, reading, finished, dropped),
        dates when books were added/started/finished, and associated book details.
        Use this tool when you need to see what books a user has in their collection,
        check reading progress, or manage their personal library. The response includes
        book metadata (title, author, genre) combined with user-specific data (reading
        status, dates). This is different from browsing all available books - this
        shows only books the user has chosen to track. Results are paginated and sorted
        by date_added (most recent first). Requires user authentication.
      summary: List authenticated user's personal book collection
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -book__title
          - -date_added
          - -date_finished
          - -date_started
          - -reading_status
          - book__title
          - date_added
          - date_finished
          - date_started
          - reading_status
        description: 'Sort the collection by specified field. Available options: ''date_added''
          (newest first), ''book__title'' (alphabetical), ''reading_status'', ''date_started'',
          ''date_finished'', or negative versions for reverse order. Default is newest
          added first (-date_added).'
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: reading_status
        schema:
          type: string
          enum:
          - dropped
          - finished
          - reading
          - want_to_read
        description: |-
          * `want_to_read` - Want to Read
          * `reading` - Reading
          * `finished` - Finished
          * `dropped` - Dropped
      - in: query
        name: search
        schema:
          type: string
        description: Search within user's collection by book title, author name, or
          reading status. Performs case-insensitive text search to help find specific
          books in the user's personal library.
      tags:
      - user-books
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Paginated list of books in user's personal collection with
            reading status
  /api/user-books/{id}/:
    put:
      operationId: update_book_reading_status_in_collection
      description: Update the reading status and tracking information for a book in
        the authenticated user's collection using the userbook_id. This endpoint allows
        changing the reading_status (want_to_read, reading, finished, dropped) and
        automatically manages related date fields based on status transitions. When
        status changes to 'reading', date_started is set to current time. When status
        changes to 'finished', date_finished is set to current time. Use this tool
        when a user progresses through reading a book or changes their intent for
        a book in their collection. The userbook_id identifies the specific user-book
        relationship to update. You cannot change which book this relationship points
        to - only the user's interaction with that book. The system validates status
        transitions and ensures dates remain consistent. Requires the complete object
        data (PUT method). PATCH method is not supported due to technical issues -
        use PUT for all updates. Requires user authentication and ownership of the
        userbook relationship.
      summary: Update reading status and tracking for book in user's collection
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user book.
        required: true
      tags:
      - user-books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBookRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserBookRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserBookRequest'
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Book reading status successfully updated with automatic date
            management
        '400':
          description: Validation error or invalid status transition
        '404':
          description: UserBook relationship not found in authenticated user's collection
    get:
      operationId: get_book_from_user_collection
      description: Retrieve comprehensive information about a specific book in the
        authenticated user's personal collection using the userbook_id (not the book_id).
        This endpoint returns the user's relationship to the book including current
        reading status, dates when the book was added/started/finished, combined with
        complete book details (title, author, description, genre) and any review the
        user has written for this book. Use this tool when you need detailed information
        about how a specific user relates to a specific book in their collection.
        The userbook_id is the unique identifier for the user-book relationship, which
        you can get from the list endpoint. This is different from the general book
        browsing endpoint - this shows user-specific tracking information. Returns
        404 if the userbook_id doesn't exist or doesn't belong to the authenticated
        user. Requires user authentication.
      summary: Get detailed information about a book in user's collection
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user book.
        required: true
      tags:
      - user-books
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Complete book details with user's reading status, dates, and
            review if available
        '404':
          description: UserBook relationship not found in authenticated user's collection
    delete:
      operationId: remove_book_from_user_collection
      description: Remove a book from the authenticated user's personal collection
        using the userbook_id. This operation deletes the user-book relationship and
        all associated tracking data (reading status, dates) but does NOT delete the
        book itself from the system - other users can still have this book in their
        collections and the book remains available for browsing and future additions.
        Use this tool when a user wants to completely remove a book from their personal
        library and stop tracking it. This action also removes any review the user
        has written for this book, as reviews are tied to the user-book relationship.
        The userbook_id identifies the specific relationship to delete. This is irreversible
        - if the user wants the book back in their collection, they'll need to add
        it again with a fresh tracking relationship. Requires user authentication
        and ownership of the userbook relationship.
      summary: Remove book from user's personal collection
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user book.
        required: true
      tags:
      - user-books
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '204':
          description: Book and all tracking data successfully removed from user's
            collection
        '404':
          description: UserBook relationship not found in authenticated user's collection
  /api/authors/:
    post:
      operationId: create_author
      description: Create a new author record for use when cataloging books.
      summary: Create author
      tags:
      - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
        required: true
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '201':
          description: Author created
        '400':
          description: Validation error
    get:
      operationId: list_authors_for_discovery
      description: Retrieve a paginated list of all authors with search and ordering
        support.
      summary: List authors
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -name
          - created_at
          - name
        description: Sort results by 'name', '-name', 'created_at', or '-created_at'.
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search authors by name or biography (case-insensitive).
      tags:
      - authors
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '200':
          description: Paginated list of authors
  /api/authors/{id}/:
    patch:
      operationId: partial_update_author
      description: Update selected author fields without replacing the entire record.
      summary: Partially update author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this author.
        required: true
      tags:
      - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAuthorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAuthorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAuthorRequest'
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '200':
          description: Author partially updated
        '400':
          description: Validation error
        '404':
          description: Author not found
    put:
      operationId: update_author
      description: Replace all author fields with supplied data.
      summary: Update author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this author.
        required: true
      tags:
      - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
        required: true
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '200':
          description: Author updated
        '400':
          description: Validation error
        '404':
          description: Author not found
    get:
      operationId: get_author_complete_details
      description: Get full author details and their books.
      summary: Retrieve author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this author.
        required: true
      tags:
      - authors
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '200':
          description: Author details returned
        '404':
          description: Author not found
    delete:
      operationId: delete_author
      description: Delete an author. Cascades to books that reference this author.
      summary: Delete author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this author.
        required: true
      tags:
      - authors
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '204':
          description: Author deleted
        '404':
          description: Author not found
  /api/reviews/:
    post:
      operationId: create_book_review
      description: Create a new review for a book that exists in the authenticated
        user's personal collection. The review must include a star rating (integer
        from 1-5) and can optionally include review text content. Users can only write
        one review per book - attempting to create a duplicate review will result
        in a validation error. The book being reviewed must already exist in the user's
        collection (added via the user_books endpoints). Use this tool when a user
        wants to rate and review a book they have read or are reading. The review
        becomes part of the book's overall review collection and is associated with
        both the user and the specific book. Reviews can be edited later using the
        update endpoints. The system validates that the rating is within the 1-5 range
        and that the user hasn't already reviewed this book. Requires user authentication
        and the book must be in the user's collection.
      summary: Write a new review for a book in user's collection
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
        required: true
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '201':
          description: Review successfully created with rating and optional text
        '400':
          description: Validation error, invalid rating, or user has already reviewed
            this book
    get:
      operationId: list_user_book_reviews
      description: Retrieve all book reviews that the authenticated user has written,
        including ratings, review text, and associated book information. This endpoint
        returns only reviews created by the authenticated user, not reviews by other
        users or reviews for books not in the user's collection. Each review includes
        the star rating (1-5), review text content, creation/update timestamps, and
        complete details about the book being reviewed (title, author, genre). Use
        this tool when you need to see all reviews a user has written, for displaying
        their review history, or for managing their review content. Reviews are automatically
        linked to books in the user's collection - users can only review books they
        have added to their personal library. Results are paginated and sorted by
        creation date (most recent first). Requires user authentication.
      summary: List all reviews written by authenticated user
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -book__title
          - -created_at
          - -rating
          - -updated_at
          - book__title
          - created_at
          - rating
          - updated_at
        description: 'Sort reviews by specified field. Available options: ''created_at''
          (newest first), ''updated_at'', ''rating'' (highest first), ''book__title''
          (alphabetical), or negative versions for reverse order. Default is newest
          created first (-created_at).'
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: rating
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search within user's reviews by book title, author name, or review
          text content. Performs case-insensitive text search to help find specific
          reviews in the user's review history.
      tags:
      - reviews
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Paginated list of all reviews written by the authenticated
            user
  /api/reviews/{id}/:
    patch:
      operationId: partially_update_user_review
      description: Partially update an existing review by modifying only the fields
        you specify (typically rating or text) without requiring the complete review
        data. This endpoint allows updating just the star rating, just the review
        text, or both, without needing to provide all fields. The associated book
        cannot be changed. Use this tool when you want to make targeted changes to
        a review, such as adjusting only the rating or only the text content. The
        update automatically sets the updated_at timestamp. More convenient than the
        full update endpoint when you only need to change specific fields. The review_id
        must correspond to a review owned by the authenticated user. Validates that
        any provided rating is within the 1-5 range. The book association remains
        unchanged. Requires user authentication and ownership of the review.
      summary: Partially update specific fields of a book review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Review fields successfully updated with automatic timestamp
            management
        '400':
          description: Validation error or invalid field values
        '404':
          description: Review not found or not owned by authenticated user
    put:
      operationId: update_user_book_review
      description: Update an existing review written by the authenticated user using
        the review_id. This endpoint allows modification of the star rating (1-5)
        and review text content, but the associated book cannot be changed once a
        review is created - to review a different book, create a new review. Use this
        tool when a user wants to change their opinion about a book, update their
        rating, or revise their review text. The update automatically sets the updated_at
        timestamp to the current time. Requires the complete review data (PUT method)
        including both rating and text fields. For partial updates (changing only
        rating or only text), use the partial_update endpoint instead. The review_id
        must correspond to a review owned by the authenticated user. Validates that
        the new rating is within the 1-5 range. Requires user authentication and ownership
        of the review.
      summary: Update an existing book review with complete data
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
        required: true
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Review successfully updated with new rating and/or text content
        '400':
          description: Validation error or invalid rating value
        '404':
          description: Review not found or not owned by authenticated user
    get:
      operationId: get_user_review_details
      description: Retrieve complete information about a specific review written by
        the authenticated user using the review_id. This endpoint returns the full
        review details including the star rating, complete review text, creation and
        last update timestamps, and comprehensive information about the book being
        reviewed (title, author, genre, description). Use this tool when you need
        detailed information about a specific review, such as when editing a review
        or displaying full review content. The review_id must correspond to a review
        written by the authenticated user - users cannot access reviews written by
        other users through this endpoint. The response includes both the review data
        and associated book metadata for context. Returns 404 if the review_id doesn't
        exist or doesn't belong to the authenticated user. Requires user authentication.
      summary: Get detailed information about a specific user review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - reviews
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '200':
          description: Complete review details with associated book information
        '404':
          description: Review not found or not owned by authenticated user
    delete:
      operationId: delete_user_book_review
      description: Permanently delete a review written by the authenticated user using
        the review_id. This operation completely removes the review from the system
        including the rating, text content, and all associated metadata. The action
        is irreversible - if the user wants to review the book again, they will need
        to create a completely new review. Use this tool when a user no longer wants
        their review to be part of the book's review collection or wants to remove
        their opinion from the system. This does not affect the book itself or the
        user's collection relationship to the book - it only removes the review. The
        book remains in the user's collection with whatever reading status it had.
        The review_id must correspond to a review owned by the authenticated user.
        Requires user authentication and ownership of the review.
      summary: Permanently delete a book review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - reviews
      security:
      - oauth2:
        - write
      - tokenAuth: []
      responses:
        '204':
          description: Review permanently deleted from the system
        '404':
          description: Review not found or not owned by authenticated user
  /api/genres/:
    get:
      operationId: list_available_book_genres
      description: Retrieve a comprehensive list of all book genres available in the
        system with statistical information. This endpoint returns each genre with
        its identifier, human-readable name, total book count, and optional descriptive
        information. Use this tool when you need to display genre categories for filtering,
        show users what types of books are available, or provide genre selection options
        for book discovery and collection management. Each genre entry includes the
        total number of books currently available in that category, helping users
        understand the breadth of content in each genre. The response includes all
        predefined genres supported by the system regardless of whether books currently
        exist in each category. Results are sorted alphabetically by genre name for
        consistent presentation. This is a read-only endpoint that provides system-wide
        genre information and requires user authentication for access.
      summary: List all available book genres with metadata
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -book_count
          - -name
          - book_count
          - name
        description: 'Sort the genre list by specified field. Available options: ''name''
          (alphabetical), ''book_count'' (most books first), ''-name'' (reverse alphabetical),
          ''-book_count'' (fewest books first). Default is alphabetical by name for
          consistent browsing experience.'
      - in: query
        name: search
        schema:
          type: string
        description: Search genres by name or description content. Performs case-insensitive
          text search across genre names and descriptions to help find specific genre
          categories. Use this to locate particular genres or genres with specific
          characteristics mentioned in their descriptions.
      tags:
      - genres
      - metadata
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '200':
          description: Complete list of book genres with book counts and metadata
  /api/genres/{id}/:
    get:
      operationId: get_genre_details_and_statistics
      description: Retrieve comprehensive information about a specific book genre
        using the genre identifier (slug). This endpoint returns detailed genre information
        including the human-readable name, complete description, total book count,
        and statistical metadata about books in this category. Use this tool when
        you need detailed information about a specific genre, such as when displaying
        genre-specific pages, providing genre descriptions to users, or showing detailed
        statistics about book categories. The genre_id should be the slug format identifier
        (e.g., 'science_fiction', 'fantasy', 'historical_fiction'). The response includes
        comprehensive metadata about the genre and its usage within the book collection
        system. Returns 404 if the genre_id doesn't correspond to a valid genre supported
        by the system. This does not return the actual books in the genre - for that,
        use the book browsing endpoints with genre filtering. Requires user authentication.
      summary: Get detailed information about a specific genre
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: Genre identifier (slug format, e.g. 'science_fiction', 'fantasy')
        required: true
      tags:
      - genres
      - metadata
      security:
      - oauth2:
        - read
      - tokenAuth: []
      responses:
        '200':
          description: Detailed genre information with statistics and metadata
        '404':
          description: Genre not found - invalid genre identifier provided
  /api/debug/headers/:
    post:
      operationId: debug_headers_create
      description: Temporary diagnostic endpoint to view incoming request headers
        and resolved auth metadata.
      summary: Inspect request headers and auth info
      tags:
      - debug
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebugHeadersResponse'
          description: ''
    get:
      operationId: debug_headers_retrieve
      description: Temporary diagnostic endpoint to view incoming request headers
        and resolved auth metadata.
      summary: Inspect request headers and auth info
      tags:
      - debug
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebugHeadersResponse'
          description: ''
components:
  schemas:
    AuthorRequest:
      type: object
      description: |-
        Serializer for Author model with nested book relationships.

        Provides comprehensive author information including biographical details
        and the total count of books they have authored.
      properties:
        name:
          type: string
          minLength: 1
          description: Author's full name (must be unique)
          maxLength: 255
        image:
          type:
          - string
          - 'null'
          format: binary
          description: Profile photo of the author
        biography:
          type: string
          description: Biographical information about the author
      required:
      - name
    BookRequest:
      type: object
      description: |-
        Serializer for Book model with comprehensive author information.

        Handles both reading book data with nested author details and creating
        new books with automatic author creation or lookup.
      properties:
        title:
          type: string
          minLength: 1
          description: The title of the book
          maxLength: 255
        tagline:
          type: string
          description: Brief description or tagline for the book
          maxLength: 500
        description:
          type: string
          description: Detailed description of the book's plot and themes
        image:
          type:
          - string
          - 'null'
          format: binary
          description: Book cover image
        genre:
          allOf:
          - $ref: '#/components/schemas/GenreEnum'
          description: |-
            Book genre category

            * `art` - Art
            * `biography` - Biography
            * `business` - Business
            * `chick_lit` - Chick Lit
            * `childrens` - Children's
            * `christian` - Christian
            * `classics` - Classics
            * `comics` - Comics
            * `contemporary` - Contemporary
            * `cookbooks` - Cookbooks
            * `crime` - Crime
            * `ebooks` - Ebooks
            * `fantasy` - Fantasy
            * `fiction` - Fiction
            * `gay_and_lesbian` - Gay and Lesbian
            * `graphic_novels` - Graphic Novels
            * `historical_fiction` - Historical Fiction
            * `history` - History
            * `horror` - Horror
            * `humor_and_comedy` - Humor and Comedy
            * `manga` - Manga
            * `memoir` - Memoir
            * `music` - Music
            * `mystery` - Mystery
            * `nonfiction` - Nonfiction
            * `paranormal` - Paranormal
            * `philosophy` - Philosophy
            * `poetry` - Poetry
            * `psychology` - Psychology
            * `religion` - Religion
            * `romance` - Romance
            * `science` - Science
            * `science_fiction` - Science Fiction
            * `self_help` - Self Help
            * `suspense` - Suspense
            * `spirituality` - Spirituality
            * `sports` - Sports
            * `thriller` - Thriller
            * `travel` - Travel
            * `young_adult` - Young Adult
        author_name:
          type: string
          writeOnly: true
          minLength: 1
          description: Author name for creating/getting author. If author doesn't
            exist, they will be created automatically.
      required:
      - author_name
      - genre
      - title
    DebugAuthInfo:
      type: object
      description: Serializer describing authentication metadata captured by debug
        endpoint.
      properties:
        user:
          type: string
          description: String representation of the authenticated user
        is_authenticated:
          type: boolean
          description: Whether the request user is authenticated
        auth_object:
          type:
          - string
          - 'null'
          description: String representation of the auth token or object
        auth_type:
          type:
          - string
          - 'null'
          description: Class name of the auth object, if any
      required:
      - is_authenticated
      - user
    DebugHeadersResponse:
      type: object
      description: Serializer for debug headers endpoint response.
      properties:
        method:
          type: string
          description: HTTP method used for the request (e.g., GET)
        path:
          type: string
          description: Full request path
        headers:
          type: object
          additionalProperties:
            type: string
          description: Request headers keyed by header name
        auth_info:
          allOf:
          - $ref: '#/components/schemas/DebugAuthInfo'
          description: Authentication metadata for the request
        remote_addr:
          type:
          - string
          - 'null'
          description: IP address of the client making the request
        user_agent:
          type:
          - string
          - 'null'
          description: User agent string provided by the client
        message:
          type: string
          description: Human-readable explanation of the endpoint purpose
      required:
      - auth_info
      - headers
      - message
      - method
      - path
    GenreEnum:
      enum:
      - art
      - biography
      - business
      - chick_lit
      - childrens
      - christian
      - classics
      - comics
      - contemporary
      - cookbooks
      - crime
      - ebooks
      - fantasy
      - fiction
      - gay_and_lesbian
      - graphic_novels
      - historical_fiction
      - history
      - horror
      - humor_and_comedy
      - manga
      - memoir
      - music
      - mystery
      - nonfiction
      - paranormal
      - philosophy
      - poetry
      - psychology
      - religion
      - romance
      - science
      - science_fiction
      - self_help
      - suspense
      - spirituality
      - sports
      - thriller
      - travel
      - young_adult
      type: string
      description: |-
        * `art` - Art
        * `biography` - Biography
        * `business` - Business
        * `chick_lit` - Chick Lit
        * `childrens` - Children's
        * `christian` - Christian
        * `classics` - Classics
        * `comics` - Comics
        * `contemporary` - Contemporary
        * `cookbooks` - Cookbooks
        * `crime` - Crime
        * `ebooks` - Ebooks
        * `fantasy` - Fantasy
        * `fiction` - Fiction
        * `gay_and_lesbian` - Gay and Lesbian
        * `graphic_novels` - Graphic Novels
        * `historical_fiction` - Historical Fiction
        * `history` - History
        * `horror` - Horror
        * `humor_and_comedy` - Humor and Comedy
        * `manga` - Manga
        * `memoir` - Memoir
        * `music` - Music
        * `mystery` - Mystery
        * `nonfiction` - Nonfiction
        * `paranormal` - Paranormal
        * `philosophy` - Philosophy
        * `poetry` - Poetry
        * `psychology` - Psychology
        * `religion` - Religion
        * `romance` - Romance
        * `science` - Science
        * `science_fiction` - Science Fiction
        * `self_help` - Self Help
        * `suspense` - Suspense
        * `spirituality` - Spirituality
        * `sports` - Sports
        * `thriller` - Thriller
        * `travel` - Travel
        * `young_adult` - Young Adult
    PatchedAuthorRequest:
      type: object
      description: |-
        Serializer for Author model with nested book relationships.

        Provides comprehensive author information including biographical details
        and the total count of books they have authored.
      properties:
        name:
          type: string
          minLength: 1
          description: Author's full name (must be unique)
          maxLength: 255
        image:
          type:
          - string
          - 'null'
          format: binary
          description: Profile photo of the author
        biography:
          type: string
          description: Biographical information about the author
    PatchedBookRequest:
      type: object
      description: |-
        Serializer for Book model with comprehensive author information.

        Handles both reading book data with nested author details and creating
        new books with automatic author creation or lookup.
      properties:
        title:
          type: string
          minLength: 1
          description: The title of the book
          maxLength: 255
        tagline:
          type: string
          description: Brief description or tagline for the book
          maxLength: 500
        description:
          type: string
          description: Detailed description of the book's plot and themes
        image:
          type:
          - string
          - 'null'
          format: binary
          description: Book cover image
        genre:
          allOf:
          - $ref: '#/components/schemas/GenreEnum'
          description: |-
            Book genre category

            * `art` - Art
            * `biography` - Biography
            * `business` - Business
            * `chick_lit` - Chick Lit
            * `childrens` - Children's
            * `christian` - Christian
            * `classics` - Classics
            * `comics` - Comics
            * `contemporary` - Contemporary
            * `cookbooks` - Cookbooks
            * `crime` - Crime
            * `ebooks` - Ebooks
            * `fantasy` - Fantasy
            * `fiction` - Fiction
            * `gay_and_lesbian` - Gay and Lesbian
            * `graphic_novels` - Graphic Novels
            * `historical_fiction` - Historical Fiction
            * `history` - History
            * `horror` - Horror
            * `humor_and_comedy` - Humor and Comedy
            * `manga` - Manga
            * `memoir` - Memoir
            * `music` - Music
            * `mystery` - Mystery
            * `nonfiction` - Nonfiction
            * `paranormal` - Paranormal
            * `philosophy` - Philosophy
            * `poetry` - Poetry
            * `psychology` - Psychology
            * `religion` - Religion
            * `romance` - Romance
            * `science` - Science
            * `science_fiction` - Science Fiction
            * `self_help` - Self Help
            * `suspense` - Suspense
            * `spirituality` - Spirituality
            * `sports` - Sports
            * `thriller` - Thriller
            * `travel` - Travel
            * `young_adult` - Young Adult
        author_name:
          type: string
          writeOnly: true
          minLength: 1
          description: Author name for creating/getting author. If author doesn't
            exist, they will be created automatically.
    PatchedReviewRequest:
      type: object
      description: |-
        Serializer for Review model with comprehensive validation and user-book relationships.

        Ensures users can only review books once and validates rating scores.
      properties:
        book_id:
          type: integer
          writeOnly: true
          description: ID of the book being reviewed
        rating:
          type: integer
          maximum: 5
          minimum: 1
          description: Star rating from 1 to 5 stars
        text:
          type: string
          description: Written review content (optional)
    PatchedUserRequest:
      type: object
      description: Serializer for User model with core fields.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
    ReadingStatusEnum:
      enum:
      - want_to_read
      - reading
      - finished
      - dropped
      type: string
      description: |-
        * `want_to_read` - Want to Read
        * `reading` - Reading
        * `finished` - Finished
        * `dropped` - Dropped
    ReviewRequest:
      type: object
      description: |-
        Serializer for Review model with comprehensive validation and user-book relationships.

        Ensures users can only review books once and validates rating scores.
      properties:
        book_id:
          type: integer
          writeOnly: true
          description: ID of the book being reviewed
        rating:
          type: integer
          maximum: 5
          minimum: 1
          description: Star rating from 1 to 5 stars
        text:
          type: string
          description: Written review content (optional)
      required:
      - book_id
      - rating
    UserBookRequest:
      type: object
      description: |-
        Serializer for UserBook model with comprehensive book and reading status management.

        Supports both adding existing books to collection via book_id or creating
        new books directly with title, author_name, and genre fields.
      properties:
        book_id:
          type: integer
          writeOnly: true
          description: ID of existing book to add to collection
        reading_status:
          allOf:
          - $ref: '#/components/schemas/ReadingStatusEnum'
          description: |-
            Current reading status for this book

            * `want_to_read` - Want to Read
            * `reading` - Reading
            * `finished` - Finished
            * `dropped` - Dropped
        title:
          type: string
          writeOnly: true
          minLength: 1
          description: Title for new book (used when creating book inline)
        author_name:
          type: string
          writeOnly: true
          minLength: 1
          description: Author name for new book (used when creating book inline)
        genre:
          allOf:
          - $ref: '#/components/schemas/GenreEnum'
          writeOnly: true
          description: |-
            Genre for new book (used when creating book inline)

            * `art` - Art
            * `biography` - Biography
            * `business` - Business
            * `chick_lit` - Chick Lit
            * `childrens` - Children's
            * `christian` - Christian
            * `classics` - Classics
            * `comics` - Comics
            * `contemporary` - Contemporary
            * `cookbooks` - Cookbooks
            * `crime` - Crime
            * `ebooks` - Ebooks
            * `fantasy` - Fantasy
            * `fiction` - Fiction
            * `gay_and_lesbian` - Gay and Lesbian
            * `graphic_novels` - Graphic Novels
            * `historical_fiction` - Historical Fiction
            * `history` - History
            * `horror` - Horror
            * `humor_and_comedy` - Humor and Comedy
            * `manga` - Manga
            * `memoir` - Memoir
            * `music` - Music
            * `mystery` - Mystery
            * `nonfiction` - Nonfiction
            * `paranormal` - Paranormal
            * `philosophy` - Philosophy
            * `poetry` - Poetry
            * `psychology` - Psychology
            * `religion` - Religion
            * `romance` - Romance
            * `science` - Science
            * `science_fiction` - Science Fiction
            * `self_help` - Self Help
            * `suspense` - Suspense
            * `spirituality` - Spirituality
            * `sports` - Sports
            * `thriller` - Thriller
            * `travel` - Travel
            * `young_adult` - Young Adult
        tagline:
          type: string
          writeOnly: true
          description: Brief tagline for new book (optional)
        description:
          type: string
          writeOnly: true
          description: Detailed description for new book (optional)
    UserRequest:
      type: object
      description: Serializer for User model with core fields.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
      required:
      - username
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://hypolimnial-wai-modularly.ngrok-free.dev/oauth/authorize/
          tokenUrl: https://hypolimnial-wai-modularly.ngrok-free.dev/oauth/token/
          refreshUrl: https://hypolimnial-wai-modularly.ngrok-free.dev/oauth/token/
          scopes:
            read: Read scope
            write: Write scope
            users: Access to manage users
            groups: Access to manage groups
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
servers:
- url: https://hypolimnial-wai-modularly.ngrok-free.dev
