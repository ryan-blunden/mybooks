"""
Django settings.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import json
import logging
import os
from logging import basicConfig
from pathlib import Path

import logfire
import sentry_sdk
from django.db.models import signals as django_signals
from django_components import ComponentsSettings
from dotenv import load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration

from mybooks.utils import get_code_verifier, strtobool

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent

env_file = os.path.join(BASE_DIR, ".env")
if os.path.exists(env_file):
    load_dotenv(env_file)

SITE_URL = os.getenv("SITE_URL")

LOGIN_URL = "/manage/login/"
LOGOUT_REDIRECT_URL = "/"

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

DEBUG = bool(strtobool(os.getenv("DEBUG", "false")))

DEBUG_TOOLBAR_ENABLED = bool(strtobool(os.getenv("DEBUG_TOOLBAR_ENABLED", "false")))

ENV = os.getenv("ENV", "production")

VERSION = os.getenv("VERSION", "dev")

ADMINS = json.loads(os.getenv("ADMINS", "[]"))

MANAGERS = json.loads(os.getenv("MANAGERS", "[]"))

# https://docs.djangoproject.com/en/5.1/ref/settings/#std:setting-ALLOWED_HOSTS
ALLOWED_HOSTS = list(map(str.strip, os.getenv("ALLOWED_HOSTS", "").split(",")))
CSRF_TRUSTED_ORIGINS = json.loads(os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "[]"))


INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    "admin_interface",
    "colorfield",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "tailwind",
    "django_components",
    "django_extensions",
    "oauth2_provider",
    "corsheaders",
    "oauth_dcr",
    "rest_framework",
    "rest_framework.authtoken",
    "health_check",
    "health_check.db",
    "health_check.storage",
    "health_check.contrib.migrations",
    "health_check.contrib.psutil",
    "health_check.contrib.db_heartbeat",
    "health_check.contrib.mail",
    "mybooks.apps.MyBooksConfig",
    "theme",
]

# Django Admin: use modals instead of popup windows
X_FRAME_OPTIONS = "SAMEORIGIN"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if ENV == "development":
    INTERNAL_IPS = ["127.0.0.1"]

    TEMPLATE_DEBUG = True
    TEMPLATE_STRING_IF_INVALID = "INVALID EXPRESSION: %s"

    if DEBUG and DEBUG_TOOLBAR_ENABLED:
        INSTALLED_APPS.append("debug_toolbar")
        MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")

        DEBUG_TOOLBAR_CONFIG = {
            "SHOW_TOOLBAR_CALLBACK": lambda request: DEBUG_TOOLBAR_ENABLED,
        }

ROOT_URLCONF = "mybooks.urls"

default_template_loaders = [
    "mybooks.app_template_loader.Loader",
    "django.template.loaders.filesystem.Loader",
    "django.template.loaders.app_directories.Loader",
    "django_components.template_loader.Loader",
]
cached_template_loaders = [("django.template.loaders.cached.Loader", default_template_loaders)]
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.static",
                "django.template.context_processors.media",
                "django.template.context_processors.tz",
            ],
            "loaders": cached_template_loaders,
            "builtins": [
                "django_components.templatetags.component_tags",
                "django.templatetags.static",
            ],
            "debug": DEBUG,
        },
    },
]

WSGI_APPLICATION = "mybooks.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
SQLITE_JOURNAL_MODE = os.getenv("SQLITE_JOURNAL_MODE", "DELETE")
DATABASE_ENGINES = {
    "SQLITE": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db/app.db"),
        "OPTIONS": {
            "init_command": (
                "PRAGMA foreign_keys=ON;"
                f"PRAGMA journal_mode = {SQLITE_JOURNAL_MODE};"
                "PRAGMA synchronous = NORMAL;"
                "PRAGMA busy_timeout = 5000;"
                "PRAGMA temp_store = MEMORY;"
                "PRAGMA mmap_size = 134217728;"
                "PRAGMA journal_size_limit = 67108864;"
                "PRAGMA cache_size = 2000;"
            ),
            "transaction_mode": "IMMEDIATE",
        },
    },
    "POSTGRES": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": os.getenv("POSTGRES_PORT"),
    },
}
DATABASES = {"default": DATABASE_ENGINES[os.getenv("DATABASE_ENGINE", "SQLITE")]}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
# Disabled password validators as the business wants each user to use the port{n}:port{n} username password combination
AUTH_PASSWORD_VALIDATORS = []

SERVER_EMAIL = os.getenv("EMAIL_FROM_ADDRESS")
DEFAULT_FROM_EMAIL = SERVER_EMAIL
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
EMAIL_USE_TLS = bool(strtobool(os.getenv("EMAIL_USE_TLS", "true")))
EMAIL_USE_SSL = bool(strtobool(os.getenv("EMAIL_USE_SSL", "false")))
EMAIL_SUBJECT_PREFIX = os.getenv("EMAIL_SUBJECT_PREFIX", f"[MyBooks] {ENV.capitalize()}: ")

# Sessions
# https://docs.djangoproject.com/en/5.1/ref/settings/#sessions
SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Australia/Brisbane"
USE_I18N = False
USE_L10N = False
USE_TZ = True

# Security settings
# https://docs.djangoproject.com/en/5.1/topics/security/
SECURE_HSTS_SECONDS = 3000  # 5 minutes
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "mybooks/static"),)
STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "django_components.finders.ComponentsFileSystemFinder",
)

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Logging
# https://docs.djangoproject.com/en/5.1/topics/logging/
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO" if DEBUG else "WARNING",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "WARNING",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "django.log"),
            "formatter": "verbose",
            "maxBytes": 10 * 1024 * 1024,
            "backupCount": 5,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO" if DEBUG else "WARNING",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["file"],
            "level": "ERROR",
            "propagate": False,
        },
        "app": {
            "handlers": ["console", "file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
    },
}


####################
# PACKAGE SETTINGS #
####################

LOG_IGNORE_PATTERNS = json.loads(os.getenv("LOG_IGNORE_PATTERNS", "[]"))

SENTRY_ENABLED = strtobool(os.getenv("SENTRY_ENABLED", "false"))
if SENTRY_ENABLED:
    sentry_sdk.init(
        dsn=os.getenv("SENTRY_DSN"),
        send_default_pii=True,
        environment=ENV,
        traces_sample_rate=1.0,
        release=VERSION,
        _experiments={
            "enable_logs": True,
            "before_send_log": lambda log, hint=None: None if any(s in log["body"] for s in LOG_IGNORE_PATTERNS) else log,
        },
        integrations=[
            DjangoIntegration(
                transaction_style="url",
                middleware_spans=True,
                signals_spans=True,
                signals_denylist=[
                    django_signals.pre_init,
                    django_signals.post_init,
                ],
                cache_spans=False,
                http_methods_to_capture=("GET", "POST"),
            ),
        ],
    )


LOGFIRE_ENABLED = strtobool(os.getenv("LOGFIRE_ENABLED", "false"))
if LOGFIRE_ENABLED:
    logfire.configure(
        token=os.getenv("LOGFIRE_TOKEN"),
        service_name="mybooks",
        service_version=VERSION,
        environment=ENV,
    )
    logfire.instrument_django()
    basicConfig(handlers=[logfire.LogfireLoggingHandler()])


TAILWIND_APP_NAME = "theme"

COMPONENTS = ComponentsSettings(
    dirs=[BASE_DIR / "components"],
    # autodiscover=True,
    # libraries=[],
    # template_cache_size=128,
    # context_behavior="isolated",  # "django" | "isolated"
)

HEALTH_CHECK = {
    "DISK_USAGE_MAX": 90,  # percent
    "MEMORY_MIN": 256,  # in MB
    "MAIL_TIMEOUT": 15,  # seconds
    "SUBSETS": {
        "startup-probe": [
            "MigrationsHealthCheck",
            "DatabaseBackend",
        ],
        "liveness-probe": [
            "DatabaseBackend",
        ],
    },
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated", "oauth2_provider.contrib.rest_framework.permissions.TokenHasScope"),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    "SCOPES": {"read": "Read scope", "write": "Write scope", "groups": "Access to your groups"}
}

CORS_ORIGIN_ALLOW_ALL = True

SPECTACULAR_SETTINGS = {
    "TITLE": "My Books API",
    "VERSION": "0.1.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "OAS_VERSION": "3.1.0",
    "SERVERS": [
        {
            "url": "http://localhost:8080/",
            "description": "MyBooks local server",
        },
    ],
}


################
# App Settings #
################

OATH_CLIENT_ID = os.getenv("OAUTH_CLIENT_ID")
OATH_CLIENT_SECRET = os.getenv("OAUTH_CLIENT_SECRET")
OAUTH_GET_CODE_VERIFIER = os.getenv("OAUTH_GET_CODE_VERIFIER")
# CODE_CHALLENGE=PpTct8akOBdXfM0Wr1zKKwni-iaYpP2fT7z-m-Vnqf8
